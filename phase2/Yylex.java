/* The following code was generated by JFlex 1.6.0 */

import java.io.*;

class Yytoken {
  public int m_index;
  public String m_text;
  public int m_line;
  public int m_charBegin;
  public int m_charEnd;
  Yytoken 
    (
     int index,
     String text,
     int line,
     int charBegin,
     int charEnd
     )
      {
	m_index = index;
	m_text = new String(text);
	m_line = line;
	m_charBegin = charBegin;
	m_charEnd = charEnd;
      }

  public String toString() {
      return "Token #"+m_index+": "+m_text+" (line "+m_line+")";
  }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Lex.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\0\1\50\1\50\1\0\22\0\1\0\7\0\1\42"+
    "\1\43\1\40\1\36\1\30\1\37\1\5\1\41\1\2\11\3\1\31"+
    "\1\32\1\34\1\33\1\35\2\0\32\1\1\44\1\0\1\45\3\0"+
    "\1\13\1\24\1\15\1\16\1\4\1\20\1\12\1\25\1\23\2\1"+
    "\1\26\1\14\1\21\1\11\1\7\1\1\1\10\1\27\1\22\1\17"+
    "\1\46\2\1\1\47\1\1\1\0\1\6\10\0\1\50\u1fa2\0\1\50"+
    "\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\15\2"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\2\2\0"+
    "\4\2\1\23\1\24\17\2\1\25\3\2\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\3\1\0"+
    "\1\3\1\35\4\2\1\36\1\37\4\2\1\40\1\2"+
    "\1\41\2\2\1\42\2\2\1\43\2\2\1\44\1\45"+
    "\5\2\1\46\1\47\4\2\1\50\1\51\1\2\1\52"+
    "\3\2\1\53\1\54\1\2\1\55\1\56\1\2\1\57"+
    "\2\2\1\60\1\61\1\2\1\62\3\2\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\51\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\51\0\u030b\0\51\0\u0334"+
    "\0\u035d\0\u0386\0\u03af\0\u03d8\0\51\0\51\0\51\0\51"+
    "\0\51\0\51\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\122\0\122\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\u075e\0\122\0\u0787\0\u07b0\0\u07d9\0\51\0\51"+
    "\0\51\0\51\0\51\0\51\0\51\0\u0802\0\u082b\0\u082b"+
    "\0\u0854\0\122\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\122\0\122"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\122\0\u09c5\0\122\0\u09ee"+
    "\0\u0a17\0\122\0\u0a40\0\u0a69\0\122\0\u0a92\0\u0abb\0\122"+
    "\0\122\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\122\0\122"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\122\0\122\0\u0c55\0\122"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\122\0\122\0\u0cf9\0\122\0\122"+
    "\0\u0d22\0\122\0\u0d4b\0\u0d74\0\122\0\122\0\u0d9d\0\122"+
    "\0\u0dc6\0\u0def\0\u0e18\0\122\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\3\3\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\3\53\0\4\3"+
    "\2\0\21\3\16\0\2\3\3\0\2\4\1\44\1\45"+
    "\45\0\2\5\1\44\1\45\44\0\4\3\2\0\12\3"+
    "\1\46\4\3\1\47\1\3\16\0\2\3\2\0\4\3"+
    "\2\0\1\3\1\50\17\3\16\0\2\3\2\0\3\3"+
    "\1\51\2\0\21\3\16\0\2\3\2\0\4\3\2\0"+
    "\1\3\1\52\7\3\1\53\7\3\16\0\2\3\2\0"+
    "\4\3\2\0\1\3\1\54\10\3\1\55\6\3\16\0"+
    "\2\3\2\0\4\3\2\0\2\3\1\56\16\3\16\0"+
    "\2\3\2\0\4\3\2\0\2\3\1\57\1\3\1\60"+
    "\11\3\1\61\2\3\16\0\2\3\2\0\4\3\2\0"+
    "\2\3\1\62\11\3\1\63\4\3\16\0\2\3\2\0"+
    "\4\3\2\0\12\3\1\64\6\3\16\0\2\3\2\0"+
    "\4\3\2\0\2\3\1\65\1\3\1\66\3\3\1\67"+
    "\10\3\16\0\2\3\2\0\4\3\2\0\2\3\1\70"+
    "\16\3\16\0\2\3\2\0\4\3\2\0\1\3\1\71"+
    "\14\3\1\72\2\3\16\0\2\3\2\0\4\3\2\0"+
    "\11\3\1\73\1\74\6\3\16\0\2\3\2\0\3\3"+
    "\1\75\2\0\2\3\1\76\16\3\16\0\2\3\34\0"+
    "\1\77\50\0\1\100\50\0\1\101\1\0\1\102\46\0"+
    "\1\103\53\0\1\104\51\0\1\105\12\0\4\3\2\0"+
    "\4\3\1\106\14\3\16\0\2\3\3\0\2\107\2\0"+
    "\1\110\27\0\2\110\13\0\2\111\46\0\4\3\2\0"+
    "\7\3\1\112\11\3\16\0\2\3\2\0\4\3\2\0"+
    "\20\3\1\113\16\0\2\3\2\0\4\3\2\0\2\3"+
    "\1\114\16\3\16\0\2\3\2\0\4\3\2\0\1\115"+
    "\20\3\16\0\2\3\2\0\4\3\2\0\1\3\1\116"+
    "\17\3\16\0\2\3\2\0\4\3\2\0\7\3\1\117"+
    "\11\3\16\0\2\3\2\0\4\3\2\0\7\3\1\120"+
    "\11\3\16\0\2\3\2\0\4\3\2\0\12\3\1\121"+
    "\6\3\16\0\2\3\2\0\4\3\2\0\20\3\1\122"+
    "\16\0\2\3\2\0\4\3\2\0\4\3\1\123\14\3"+
    "\16\0\2\3\2\0\4\3\2\0\10\3\1\124\10\3"+
    "\16\0\2\3\2\0\4\3\2\0\21\3\16\0\1\125"+
    "\1\3\2\0\4\3\2\0\13\3\1\126\5\3\16\0"+
    "\2\3\2\0\4\3\2\0\1\3\1\127\17\3\16\0"+
    "\2\3\2\0\4\3\2\0\17\3\1\130\1\3\16\0"+
    "\2\3\2\0\4\3\2\0\12\3\1\131\6\3\16\0"+
    "\2\3\2\0\4\3\2\0\13\3\1\132\5\3\16\0"+
    "\2\3\2\0\4\3\2\0\10\3\1\133\10\3\16\0"+
    "\2\3\2\0\3\3\1\134\2\0\21\3\16\0\2\3"+
    "\2\0\4\3\2\0\13\3\1\135\5\3\16\0\2\3"+
    "\2\0\4\3\2\0\3\3\1\136\15\3\16\0\2\3"+
    "\2\0\4\3\2\0\2\3\1\137\16\3\16\0\2\3"+
    "\2\0\4\3\2\0\1\3\1\140\17\3\16\0\2\3"+
    "\3\0\2\107\47\0\2\111\1\44\45\0\3\3\1\141"+
    "\2\0\21\3\16\0\2\3\2\0\4\3\2\0\3\3"+
    "\1\142\2\3\1\143\12\3\16\0\2\3\2\0\3\3"+
    "\1\144\2\0\21\3\16\0\2\3\2\0\4\3\2\0"+
    "\4\3\1\145\14\3\16\0\2\3\2\0\4\3\2\0"+
    "\20\3\1\146\16\0\2\3\2\0\3\3\1\147\2\0"+
    "\21\3\16\0\2\3\2\0\4\3\2\0\1\3\1\150"+
    "\17\3\16\0\2\3\2\0\4\3\2\0\15\3\1\151"+
    "\3\3\16\0\2\3\2\0\4\3\2\0\14\3\1\152"+
    "\4\3\16\0\2\3\2\0\4\3\2\0\20\3\1\153"+
    "\16\0\2\3\2\0\4\3\2\0\6\3\1\154\12\3"+
    "\16\0\2\3\2\0\3\3\1\155\2\0\21\3\16\0"+
    "\2\3\2\0\4\3\2\0\12\3\1\156\6\3\16\0"+
    "\2\3\2\0\4\3\2\0\14\3\1\157\4\3\16\0"+
    "\2\3\2\0\4\3\2\0\17\3\1\160\1\3\16\0"+
    "\2\3\2\0\4\3\2\0\1\3\1\161\17\3\16\0"+
    "\2\3\2\0\3\3\1\162\2\0\21\3\16\0\2\3"+
    "\2\0\4\3\2\0\4\3\1\163\14\3\16\0\2\3"+
    "\2\0\4\3\2\0\21\3\16\0\1\3\1\164\2\0"+
    "\4\3\2\0\13\3\1\165\5\3\16\0\2\3\2\0"+
    "\4\3\2\0\17\3\1\166\1\3\16\0\2\3\2\0"+
    "\4\3\2\0\17\3\1\167\1\3\16\0\2\3\2\0"+
    "\3\3\1\170\2\0\21\3\16\0\2\3\2\0\4\3"+
    "\2\0\13\3\1\171\5\3\16\0\2\3\2\0\4\3"+
    "\2\0\12\3\1\172\6\3\16\0\2\3\2\0\4\3"+
    "\2\0\4\3\1\173\14\3\16\0\2\3\2\0\4\3"+
    "\2\0\7\3\1\174\11\3\16\0\2\3\2\0\4\3"+
    "\2\0\13\3\1\175\5\3\16\0\2\3\2\0\3\3"+
    "\1\176\2\0\21\3\16\0\2\3\2\0\4\3\2\0"+
    "\14\3\1\177\4\3\16\0\2\3\2\0\4\3\2\0"+
    "\5\3\1\200\13\3\16\0\2\3\2\0\4\3\2\0"+
    "\10\3\1\201\10\3\16\0\2\3\2\0\4\3\2\0"+
    "\2\3\1\202\16\3\16\0\2\3\2\0\4\3\2\0"+
    "\1\3\1\203\17\3\16\0\2\3\2\0\4\3\2\0"+
    "\12\3\1\204\6\3\16\0\2\3\2\0\3\3\1\205"+
    "\2\0\21\3\16\0\2\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\15\1\1\11\1\1\1\11"+
    "\5\1\6\11\1\1\2\0\31\1\7\11\2\1\1\0"+
    "\75\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { ;
          }
        case 53: break;
        case 2: 
          { return YYParser.ID;
          }
        case 54: break;
        case 3: 
          { return YYParser.DOUBLECONSTANT;
          }
        case 55: break;
        case 4: 
          { return YYParser.INTCONSTANT;
          }
        case 56: break;
        case 5: 
          { return YYParser.DOT;
          }
        case 57: break;
        case 6: 
          { return YYParser.COMMA;
          }
        case 58: break;
        case 7: 
          { return YYParser.COLON;
          }
        case 59: break;
        case 8: 
          { return YYParser.SEMICOLON;
          }
        case 60: break;
        case 9: 
          { return YYParser.L;
          }
        case 61: break;
        case 10: 
          { return YYParser.G;
          }
        case 62: break;
        case 11: 
          { return YYParser.SUM;
          }
        case 63: break;
        case 12: 
          { return YYParser.MINUS;
          }
        case 64: break;
        case 13: 
          { return YYParser.MUL;
          }
        case 65: break;
        case 14: 
          { return YYParser.DIVINT;
          }
        case 66: break;
        case 15: 
          { return YYParser.OPARAN;
          }
        case 67: break;
        case 16: 
          { return YYParser.CPARAN;
          }
        case 68: break;
        case 17: 
          { return YYParser.OBRACKET;
          }
        case 69: break;
        case 18: 
          { return YYParser.CBRACKET;
          }
        case 70: break;
        case 19: 
          { return YYParser.OR;
          }
        case 71: break;
        case 20: 
          { return YYParser.OF;
          }
        case 72: break;
        case 21: 
          { return YYParser.IF;
          }
        case 73: break;
        case 22: 
          { return YYParser.ASSIGN;
          }
        case 74: break;
        case 23: 
          { return YYParser.EQ;
          }
        case 75: break;
        case 24: 
          { return YYParser.LE;
          }
        case 76: break;
        case 25: 
          { return YYParser.NE;
          }
        case 77: break;
        case 26: 
          { return YYParser.GE;
          }
        case 78: break;
        case 27: 
          { return YYParser.INC;
          }
        case 79: break;
        case 28: 
          { return YYParser.DEC;
          }
        case 80: break;
        case 29: 
          { return YYParser.END;
          }
        case 81: break;
        case 30: 
          { return YYParser.AND;
          }
        case 82: break;
        case 31: 
          { return YYParser.MOD;
          }
        case 83: break;
        case 32: 
          { return YYParser.DIVREAL;
          }
        case 84: break;
        case 33: 
          { return YYParser.FOR;
          }
        case 85: break;
        case 34: 
          { return YYParser.NOT;
          }
        case 86: break;
        case 35: 
          { return YYParser.INT;
          }
        case 87: break;
        case 36: 
          { return YYParser.VAR;
          }
        case 88: break;
        case 37: 
          { return YYParser.ELSE;
          }
        case 89: break;
        case 38: 
          { return YYParser.CASE;
          }
        case 90: break;
        case 39: 
          { return YYParser.CHAR;
          }
        case 91: break;
        case 40: 
          { return YYParser.TRUE;
          }
        case 92: break;
        case 41: 
          { return YYParser.THEN;
          }
        case 93: break;
        case 42: 
          { return YYParser.BOOL;
          }
        case 94: break;
        case 43: 
          { return YYParser.ARRAY;
          }
        case 95: break;
        case 44: 
          { return YYParser.CONST;
          }
        case 96: break;
        case 45: 
          { return YYParser.UNTIL;
          }
        case 97: break;
        case 46: 
          { return YYParser.FALSE;
          }
        case 98: break;
        case 47: 
          { return YYParser.BEGIN;
          }
        case 99: break;
        case 48: 
          { return YYParser.REPEAT;
          }
        case 100: break;
        case 49: 
          { return YYParser.DOUBLE;
          }
        case 101: break;
        case 50: 
          { return YYParser.PROGRAM;
          }
        case 102: break;
        case 51: 
          { return YYParser.FUNCTION;
          }
        case 103: break;
        case 52: 
          { return YYParser.PROCEDURE;
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
